apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "fullname" . }}-init
  labels:
    app: {{ template "fullname" . }}
    chart: {{ .Chart.Name }}
    release: {{ template "releaseName" . }}
    heritage: {{ .Release.Service }}
  annotations:
    version: "{{ .Chart.Version }}"
spec:
  template:
    metadata:
      name: {{ template "releaseName" . }}
      labels:
        app: {{ template "fullname" . }}-init
        chart: {{ .Chart.Name }}
        release: {{ template "releaseName" .  }}
        heritage: {{ .Release.Service }}
      annotations:
        version: "{{ .Chart.Version }}"
    spec:
      hostNetwork: {{ template "hostNetwork" . }}
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}  
      restartPolicy: Never
{{ include "imagePullSecrets" . | indent 6 }}
      initContainers:
        - name: wait-for-{{ .Chart.Name }}
          image: {{ .Values.wait_for.image }}
          imagePullPolicy: {{ template "imagePullPolicy" dict "root" . "context" .Values.wait_for }}
          args:
            - "pod"
            - "-lapp={{ template "fullname" . }}"
      containers:
      - name: aws
        image: {{ .Values.aws_client_image }}
        imagePullPolicy: {{ template "imagePullPolicy" dict "root" . }}
        command:
          - "sh"
          - "-c"
          - >
            echo '[scality]' > ~/.aws/credentials ;
            echo 'aws_access_key_id = {{ .Values.key_id }}' >> ~/.aws/credentials ;
            echo 'aws_secret_access_key = {{ .Values.access_key }}' >> ~/.aws/credentials ;
            aws s3api create-bucket --endpoint-url http://{{ template "fullname" . }}:{{ .Values.scality_port }} --profile scality --bucket {{ .Values.bucketName }} ;
            exit 0;
          # TODO: for some reason the s3 url does not want to be resolved with aws client hence the command $(grep search /etc/resolv.conf | cut -d ' ' -f 2)


