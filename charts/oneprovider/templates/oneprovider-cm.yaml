{{- $nodes := .Values.nodes }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-config
  labels:
    app: {{ template "fullname" . }}
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name  }}
    heritage: {{ .Release.Service }}
  annotations:
    version: "{{ .Chart.Version }}"
data:
  ONEPANEL_LOG_LEVEL: {{ default .Values.log_level "info" | quote }}
  ONEPANEL_BATCH_MODE: {{ .Values.onepanel_batch_mode_enabled | quote }}
  ONEPANEL_GENERATE_TEST_WEB_CERT: "true"
  ONEPANEL_GENERATED_CERT_DOMAIN: "{{ template "service_url" $ }}"
  ONEPANEL_TRUST_TEST_CA: "true"

  {{ if $.Values.batchConfig }}
  ONEPROVIDER_CONFIG: |
              cluster:
                # TODO: Find way to hold this with default
                {{ if $.Values.batchConfig.domainName }}
                domainName: {{ $.Values.batchConfig.domainName }}
                {{ else }}
                domainName: {{ template "service_url" $ }}
                {{ end }}

                # Part covered by nodes configuration
                nodes:
                  {{- range $nodeName := (keys $nodes) }}
                  {{ $nodeName }}:
                    hostname: {{ template "fullname" $ }}-{{ $nodeName }}-0
                  {{- end }}
                managers:
                  mainNode: {{ .Values.clusterConfig.mainNode }}
                  nodes:
              {{- with .Values.clusterConfig.managers }}
                  {{- range $node := . }}
                    - {{ $node }}
                  {{- end }}
              {{- else }}
                  {{- range $nodeName := (keys $nodes) }}
                    - {{ $nodeName }}
                  {{- end }}
              {{- end }}
                workers:
                  nodes:
              {{- with .Values.clusterConfig.workers }}
                  {{- range $node := . }}
                    - {{ $node }}
                  {{- end }}
              {{- else }}
                  {{- range $nodeName := (keys $nodes) }}
                    - {{ $nodeName }}
                  {{- end }}
              {{- end }}
                databases:
                  nodes:
              {{- with $.Values.clusterConfig.databases }}
                  {{- range $node := . }}
                    - {{ $node }}
                  {{- end }}
              {{- else }}
                  {{- range $nodeName := (keys $nodes) }}
                    - {{ $nodeName }}
                  {{- end }}
              {{- end }}


                {{- if or (eq (len $nodes) 1) (or (index $.Values "volume-s3" "enabled")) (or (index $.Values "volume-ceph" "enabled") (or (index $.Values "volume-gluster" "enabled") (index $.Values "volume-swift" "enabled"))) }}
                storages:
                {{- end }}
                {{- if and (index $.Values "posix" "enabled") (eq (len $nodes) 1) }}
                  posix:
                    type: posix
                    # TODO: why this path is hardcoeded and why i don't have it during installation -> /volumes/storage
                    # I  deleted job check.... mby that's why should investigate this
                    mountPoint: /volumes
                  {{- if (index $.Values "posix" "luma-enabled") }}
                    lumaEnabled: {{ $.Values.luma.enabled }}
                    lumaUrl: {{ template "luma_name" $ }}:5000
                    lumaCacheTimeout: {{ $.Values.luma.lumaCacheTimeout }}
                    lumaApiKey: {{ $.Values.luma.lumaApiKey }}
                  {{- end }}
                {{- end }}
                {{- if (index $.Values "volume-nfs" "enabled") }}
                  nfs:
                    type: posix
                    mountPoint: {{ index $.Values "volume-nfs" "container_mount_path" }}
                  {{- if (index $.Values "volume-nfs" "luma-enabled") }}
                    lumaEnabled: {{ $.Values.luma.enabled }}
                    lumaUrl: {{ template "luma_name" $ }}:5000
                    lumaCacheTimeout: {{ $.Values.luma.lumaCacheTimeout }}
                    lumaApiKey: {{ $.Values.luma.lumaApiKey }}
                  {{- end }}
                {{- end }}
                {{- if (index $.Values "volume-s3" "enabled") }}
                  s3:
                    type: s3
                    hostname: {{ template "volume-s3_name" $ }}:8000
                    bucketName: {{ index $.Values "volume-s3" "bucketName" }}
                    accessKey: {{ index $.Values "volume-s3" "key_id" }}
                    secretKey: {{ index $.Values "volume-s3" "access_key" }}
                    insecure: {{ index $.Values "volume-s3" "insecure" }}
                  {{- if (index $.Values "volume-s3" "luma-enabled") }}
                    lumaEnabled: {{ $.Values.luma.enabled }}
                    lumaUrl: {{ template "luma_name" $ }}:5000
                    lumaCacheTimeout: {{ $.Values.luma.lumaCacheTimeout }}
                    lumaApiKey: {{ $.Values.luma.lumaApiKey }}
                  {{- end }}
                {{- end }}
                {{- if (index $.Values "volume-ceph" "enabled") }}
                  ceph:
                    type: ceph
                    username: {{ index $.Values "volume-ceph" "username" }}
                    key: {{ index $.Values "volume-ceph" "key" }}
                    monitorHostname: {{ template "volume-ceph_name" $ }}
                    clusterName: {{ index $.Values "volume-ceph" "cluster_name" }}
                    poolName: {{ index $.Values "volume-ceph" "pool_name" }}
                    insecure: {{ index $.Values "volume-ceph" "insecure" }}
                  {{- if (index $.Values "volume-ceph" "luma-enabled") }}
                    lumaEnabled: {{ $.Values.luma.enabled }}
                    lumaUrl: {{ template "luma_name" $ }}:5000
                    lumaCacheTimeout: {{ $.Values.luma.lumaCacheTimeout }}
                    lumaApiKey: {{ $.Values.luma.lumaApiKey }}
                  {{- end }}
                {{- end }}
                {{- if (index $.Values "volume-gluster" "enabled") }}
                  gluster:
                    type: glusterfs
                    hostname: {{ template "volume-gluster_name" $ }}
                    volume: {{ index $.Values "volume-gluster" "volumeName" }}
                    transport: tcp
                    insecure: {{ index $.Values "volume-gluster" "insecure" }}
                  {{- if (index $.Values "volume-gluster" "luma-enabled") }}
                    lumaEnabled: {{ $.Values.luma.enabled }}
                    lumaUrl: {{ template "luma_name" $ }}:5000
                    lumaCacheTimeout: {{ $.Values.luma.lumaCacheTimeout }}
                    lumaApiKey: {{ $.Values.luma.lumaApiKey }}
                  {{- end }}
                {{- end }}
                {{- if (index $.Values "volume-swift" "enabled") }}
                  swift:
                    type: swift
                    authUrl: http://{{ template "volume-swift_name" $ }}:5000/v2.0/tokens
                    tenantName: {{ index $.Values "volume-swift" "tenantName" }}
                    containerName: {{ index $.Values "volume-swift" "containerName" }}
                    username: {{ index $.Values "volume-swift" "username" }}
                    password: {{ index $.Values "volume-swift" "password" }}
                    insecure: {{ index $.Values "volume-swift" "insecure" }}
                  {{- if (index $.Values "volume-swift" "luma-enabled") }}
                    lumaEnabled: {{ $.Values.luma.enabled }}
                    lumaUrl: {{ template "luma_name" $ }}:5000
                    lumaCacheTimeout: {{ $.Values.luma.lumaCacheTimeout }}
                    lumaApiKey: {{ $.Values.luma.lumaApiKey }}
                  {{- end }}
                {{- end }}

              oneprovider:
                register: true
                {{ if $.Values.batchConfig.name -}}
                name: {{ $.Values.batchConfig.name }}
                {{- else -}}
                name: {{ template "fullname" $ }}
                {{- end }}
                subdomainDelegation: false

                adminEmail: admin@onedata.org

                # TODO: Find way to hold this with default
                {{ if $.Values.batchConfig.domainName }}
                domain: {{ $.Values.batchConfig.domainName }}
                {{ else }}
                domain: {{ template "service_url" $ }}
                {{ end }}

                geoLatitude: {{ $.Values.batchConfig.geoLatitude }}
                geoLongitude: {{ $.Values.batchConfig.geoLongitude }}
              # TODO: make it possible for onedata services to communicate using
              # system configured DNS. this will allow to put here just service name
              # instead of FQDN
              onezone:
                {{ if $.Values.batchConfig.domainName }}
                domainName: {{ $.Values.batchConfig.onezoneDomainName }}
                {{ else }}
                domainName: {{ template "onezone_service_url" $ }}
                {{ end }}

              {{- if and $.Values.batchConfig.createUsers (or $.Values.batchConfig.onepanelAdminUsers $.Values.batchConfig.onepanelUsers) }}
              onepanel:
                users:
                  {{- range $.Values.batchConfig.onepanelAdminUsers }}
                  {{ .login }}:
                    password: {{ .password }}
                    userRole: admin
                  {{- end }}
                  {{- range $.Values.batchConfig.onepanelUsers }}
                  {{ .login }}:
                    password: {{ .password }}
                    userRole: regular
                  {{- end }}
              {{- end }}
  {{ end }}
{{ toYaml .Values.oneproviderEnv | indent 2 }}