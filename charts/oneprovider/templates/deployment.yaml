apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    onedata-service: "oneprovider"
  annotations:
    version: "{{ .Chart.Version }}"
spec:
  serviceName: {{ template "fullname" . }}
  replicas: {{ .Values.oneprovider_nodes_count }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: {{ .Chart.Name }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        onedata-service: "oneprovider"
      annotations:
        version: "{{ .Chart.Version }}"
    spec:
      subdomain: {{ template "fullname" . }}
      terminationGracePeriodSeconds: 0
      {{- if .Values.onedata_anti_affinity_enabled }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: onedata-service
                operator: In
                values:
                - oneprovider
                - onezone
              - key: release
                operator: In
                values:
                - {{ .Release.Name }}
            topologyKey: kubernetes.io/hostname
      {{- end }}
{{ include "imagePullSecrets" . | indent 6 }}
      {{- if or (eq (int .Values.oneprovider_nodes_count) 1) (or (index .Values "volume-s3" "enabled")) (or (index .Values "volume-ceph" "enabled") (or (index .Values "volume-gluster" "enabled") (or (index .Values "volume-swift" "enabled") (index .Values "generate-certificates" "enabled")))) }}
      initContainers:
      {{- end }}
      {{- if (index .Values "generate-certificates" "enabled") }}
        - name: certificate-init-container
          image: {{ index .Values "generate-certificates" "image" }}
          imagePullPolicy: {{ default .Values.imagePullPolicy .Values.global.imagePullPolicy | default "IfNotPresent" }}
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CERT_DIR
              value: /etc/tls
          command:
            - "/bin/sh"
            - "-c"
            - >
              if [[ $POD_NAME != {{ template "fullname" . }}-0 ]] ; then echo "Not generating certificates" ; exit 0 ; fi ;
              mkdir $(CERT_DIR) ;
              /certificate-init-container -secret-name={{ template "fullname" . }}-secret-tls -labels=app={{ template "fullname" . }},chart={{ .Chart.Name }},release={{ .Release.Name }},heritage={{ .Release.Service }} -additional-dnsnames={{ template "fullname" . }},{{ template "fullname" . }}.$(NAMESPACE),{{ template "fullname" . }}.$(NAMESPACE).svc -cert-dir=$(CERT_DIR) -namespace=$(NAMESPACE) -pod-ip=$(POD_IP) -pod-name=$(POD_NAME) -service-names={{ template "fullname" . }} -cluster-domain={{ template "cluster_domain" . }} ;
      {{- end }}
      {{- if (index .Values "volume-s3" "enabled") }}
        - name: wait-for-volume-s3-init
          image: {{ .Values.wait_for.image }}
          imagePullPolicy: {{ default .Values.wait_for.imagePullPolicy .Values.global.imagePullPolicy | default "IfNotPresent" }}
          args:
            - "job"
            - "{{ template "volume-s3_name" . }}-init"
      {{- end }}
      {{- if (index .Values "volume-ceph" "enabled") }}
        - name: wait-for-volume-ceph
          image: {{ .Values.wait_for.image }}
          imagePullPolicy: {{ default .Values.wait_for.imagePullPolicy .Values.global.imagePullPolicy | default "IfNotPresent" }}
          args:
            - "pod"
            - "-lapp={{ template "volume-ceph_name" . }}"
      {{- end }}
      {{- if (index .Values "volume-gluster" "enabled") }}
        - name: wait-for-volume-gluster
          image: {{ .Values.wait_for.image }}
          imagePullPolicy: {{ default .Values.wait_for.imagePullPolicy .Values.global.imagePullPolicy | default "IfNotPresent" }}
          args:
            - "pod"
            - "-lapp={{ template "volume-gluster_name" . }}"
      {{- end }}
      {{- if (index .Values "volume-swift" "enabled") }}
        - name: wait-for-volume-swift
          image: {{ .Values.wait_for.image }}
          imagePullPolicy: {{ default .Values.wait_for.imagePullPolicy .Values.global.imagePullPolicy | default "IfNotPresent" }}
          args:
            - "pod"
            - "-lapp={{ template "volume-swift_name" . }}"
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image }}
        imagePullPolicy: {{ default .Values.imagePullPolicy .Values.global.imagePullPolicy | default "IfNotPresent" }}
        {{- if or .Values.cpu .Values.memory }}
        resources:
          requests:
          {{- if .Values.cpu }}
            cpu: {{ .Values.cpu }}
          {{- end }}
          {{- if .Values.memory }}
            memory: {{ .Values.memory }}
          {{- end }}
        {{- end }}
        ports:
          - containerPort: 53
          - containerPort: 80
          - containerPort: 443
          - containerPort: 5555
          - containerPort: 5556
          - containerPort: 6665
          - containerPort: 6666
          - containerPort: 7443
          - containerPort: 8443
          - containerPort: 8876
          - containerPort: 8877
          - containerPort: 9443
        command:
          - "/bin/bash"
          - "-c"
          - >
            echo {{ template "fullname" . }}-{{ sub (.Values.oneprovider_nodes_count) 1 }} ;
            if [[ "$HOSTNAME" != {{ template "fullname" . }}-{{ sub (.Values.oneprovider_nodes_count) 1 }} ]]; then export ONEPANEL_BATCH_MODE="false" ; fi ;
            env ;
            /root/oneprovider.sh ;
            cat /var/log/op_panel/info.log ;  
            exit 1 ;
        lifecycle:
          preStop:
            exec:
              command:
                - "sh"
                - "-c"
                - >
                  op_panel stop ;
                  op_worker stop ;
                  cluster_manager stop ;
                  /etc/init.d/couchbase-server stop ;
                  pkill -f oneprovider.py ;
        readinessProbe:
          exec:
            command:
              - "/bin/bash"
              - "-c"
              - >
                onepanel_ready() { sleep 5 ; exit 0 ; } ;
                if [[ "$HOSTNAME" == {{ template "fullname" . }}-{{ sub (.Values.oneprovider_nodes_count) 1 }} ]]; then exit 0 ; else onepanel_ready ; fi ;
        env:
          - name: ONEPANEL_LOG_LEVEL
            value: {{ default .Values.log_level "info" | quote }}
          - name: ONEPANEL_BATCH_MODE
            value: {{ .Values.onepanel_batch_mode_enabled | quote }}
          - name: ONEPROVIDER_CONFIG
            value: |
              cluster:
                domainName: "{{ template "service_url" . }}"
                nodes:
                  {{- $r := . -}}
                  {{- range $i := until (int (.Values.oneprovider_nodes_count)) }}
                  n{{ $i }}: 
                    hostname: {{ template "fullname" $r }}-{{ $i }}
                  {{- end }}
                managers:
                  mainNode: n{{ sub (.Values.oneprovider_nodes_count) 1 }} 
                  nodes:
              {{- with .Values.cluster_config.managers }}
                  {{- range $i := . }}
                    - n{{ $i }}
                  {{- end }}
              {{- else }}
                  {{- range $i := until (int ($r.Values.oneprovider_nodes_count)) }}
                    - n{{ $i }}
                  {{- end }}
              {{- end }}
                workers:
                  nodes:
              {{- with .Values.cluster_config.workers }}
                  {{- range $i := . }}
                    - n{{ $i }}
                  {{- end }}
              {{- else }}
                  {{- range $i := until (int ($r.Values.oneprovider_nodes_count)) }}
                    - n{{ $i }}
                  {{- end }}
              {{- end }}
                databases:
                  nodes:
              {{- with .Values.cluster_config.databases }}
                  {{- range $i := . }}
                    - n{{ $i }}
                  {{- end }}
              {{- else }}
                  {{- range $i := until (int ($r.Values.oneprovider_nodes_count)) }}
                    - n{{ $i }}
                  {{- end }}
              {{- end }}
                {{- if or (eq (int .Values.oneprovider_nodes_count) 1) (or (index .Values "volume-s3" "enabled")) (or (index .Values "volume-ceph" "enabled") (or (index .Values "volume-gluster" "enabled") (index .Values "volume-swift" "enabled"))) }}
                storages:
                {{- end }}
                {{- if and (index .Values "posix" "enabled") (eq (int .Values.oneprovider_nodes_count) 1) }}
                  posix:
                    type: posix
                    mountPoint: /volumes/storage
                  {{- if (index .Values "posix" "luma-enabled") }}
                    lumaEnabled: {{ .Values.luma.enabled }}
                    lumaUrl: {{ template "luma_name" . }}:5000
                    lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
                    lumaApiKey: {{ .Values.luma.lumaApiKey }}
                  {{- end }}
                {{- end }}
                {{- if (index .Values "volume-nfs" "enabled") }}
                  nfs:
                    type: posix
                    mountPoint: {{ index .Values "volume-nfs" "container_mount_path" }}
                  {{- if (index .Values "volume-nfs" "luma-enabled") }}
                    lumaEnabled: {{ .Values.luma.enabled }}
                    lumaUrl: {{ template "luma_name" . }}:5000
                    lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
                    lumaApiKey: {{ .Values.luma.lumaApiKey }}
                  {{- end }}
                {{- end }}
                {{- if (index .Values "volume-s3" "enabled") }}
                  s3:
                    type: s3
                    hostname: {{ template "volume-s3_name" . }}:8000
                    bucketName: {{ index .Values "volume-s3" "bucketName" }}
                    accessKey: {{ index .Values "volume-s3" "key_id" }}
                    secretKey: {{ index .Values "volume-s3" "access_key" }}
                    insecure: {{ index .Values "volume-s3" "insecure" }}
                  {{- if (index .Values "volume-s3" "luma-enabled") }}
                    lumaEnabled: {{ .Values.luma.enabled }}
                    lumaUrl: {{ template "luma_name" . }}:5000
                    lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
                    lumaApiKey: {{ .Values.luma.lumaApiKey }}
                  {{- end }}
                {{- end }}
                {{- if (index .Values "volume-ceph" "enabled") }}
                  ceph:
                    type: ceph
                    username: {{ index .Values "volume-ceph" "username" }}
                    key: {{ index .Values "volume-ceph" "key" }}
                    monitorHostname: {{ template "volume-ceph_name" . }}
                    clusterName: {{ index .Values "volume-ceph" "cluster_name" }}
                    poolName: {{ index .Values "volume-ceph" "pool_name" }}
                    insecure: {{ index .Values "volume-ceph" "insecure" }}
                  {{- if (index .Values "volume-ceph" "luma-enabled") }}
                    lumaEnabled: {{ .Values.luma.enabled }}
                    lumaUrl: {{ template "luma_name" . }}:5000
                    lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
                    lumaApiKey: {{ .Values.luma.lumaApiKey }}
                  {{- end }}
                {{- end }}
                {{- if (index .Values "volume-gluster" "enabled") }}
                  gluster:
                    type: glusterfs
                    hostname: {{ template "volume-gluster_name" . }}
                    volume: {{ index .Values "volume-gluster" "volumeName" }}
                    transport: tcp
                    insecure: {{ index .Values "volume-gluster" "insecure" }}
                  {{- if (index .Values "volume-gluster" "luma-enabled") }}
                    lumaEnabled: {{ .Values.luma.enabled }}
                    lumaUrl: {{ template "luma_name" . }}:5000
                    lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
                    lumaApiKey: {{ .Values.luma.lumaApiKey }}
                  {{- end }}
                {{- end }}
                {{- if (index .Values "volume-swift" "enabled") }}
                  swift:
                    type: swift
                    authUrl: http://{{ template "volume-swift_name" . }}:5000/v2.0/tokens
                    tenantName: {{ index .Values "volume-swift" "tenantName" }}
                    containerName: {{ index .Values "volume-swift" "containerName" }}
                    username: {{ index .Values "volume-swift" "username" }}
                    password: {{ index .Values "volume-swift" "password" }}
                    insecure: {{ index .Values "volume-swift" "insecure" }}
                  {{- if (index .Values "volume-swift" "luma-enabled") }}
                    lumaEnabled: {{ .Values.luma.enabled }}
                    lumaUrl: {{ template "luma_name" . }}:5000
                    lumaCacheTimeout: {{ .Values.luma.lumaCacheTimeout }}
                    lumaApiKey: {{ .Values.luma.lumaApiKey }}
                  {{- end }}
                {{- end }}
              oneprovider:
                register: true
                {{ if .Values.name -}}
                name: {{ .Values.name }}
                {{- else -}}
                name: {{ template "fullname" . }}
                {{- end }}
                redirectionPoint: https://{{ template "service_url" . }}
                geoLatitude: {{ .Values.geoLatitude }}
                geoLongitude: {{ .Values.geoLongitude }}
              # TODO: make it possible for onedata services to communicate using 
              # system configured DNS. this will allow to put here just service name
              # instead of FQDN
              onezone:
                domainName: {{ template "onezone_service_url" . }}
              {{- if or .Values.onepanel_admin_users .Values.onepanel_users }}
              onepanel:
                users:
                  {{- range .Values.onepanel_admin_users }}
                  {{ .login }}:
                    password: {{ .password }}
                    userRole: admin
                  {{- end }}
                  {{- range .Values.onepanel_users }}
                  {{ .login }}:
                    password: {{ .password }}
                    userRole: regular
                  {{- end }}
              {{- end }}
      {{- if or (index .Values "generate-certificates" "enabled") (index .Values "volume-nfs" "enabled") }}
        volumeMounts:
      {{- end }}
      {{- if (index .Values "generate-certificates" "enabled") }}
          - mountPath: /etc/op_panel/certs/key.pem
            subPath: tls.key
            name: tls
            readOnly: true
          - mountPath: /etc/op_panel/certs/cert.pem
            subPath: tls.crt
            name: tls
            readOnly: true
          - mountPath: /etc/op_panel/cacerts/cacert.pem
            subPath: k8s.crt
            name: tls
            readOnly: true
          - mountPath: /etc/op_worker/cacerts/cacert.pem
            subPath: k8s.crt
            name: tls
            readOnly: true
          - mountPath: /etc/ssl/certs/kubernetes.crt
            subPath: k8s.crt
            name: tls
            readOnly: true
      {{- end }}
      {{- if (index .Values "volume-nfs" "enabled") }}
          - mountPath: {{ index .Values "volume-nfs" "container_mount_path" }}
            name: nfs
      {{- end }}
    {{- if or (index .Values "generate-certificates" "enabled") (index .Values "volume-nfs" "enabled") }}
      volumes:
    {{- end }}
    {{- if (index .Values "generate-certificates" "enabled") }}
      - name: tls
        secret:
          secretName: {{ template "fullname" . }}-secret-tls
    {{- end }}
    {{- if (index .Values "volume-nfs" "enabled") }}
      - name: nfs
        persistentVolumeClaim:
          claimName: {{ template "fullname" . }}-nfs-pvc
    {{- end }}