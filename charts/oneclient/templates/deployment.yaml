apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}"
    release: "{{ template "releaseName" . }}"
    heritage: "{{ .Release.Service }}"
  annotations:
    version: "{{ .Chart.Version }}"
spec:
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}"
        release: "{{ template "releaseName" . }}"
        heritage: "{{ .Release.Service }}"
      annotations:
        version: "{{ .Chart.Version }}"
    spec:
      hostname: {{ .Chart.Name }}
      subdomain: {{ template "fullname" . }}
      hostNetwork: {{ template "hostNetwork" . }}
      replicas: {{ .Values.replicas }}
    {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
    {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
{{ include "imagePullSecrets" . | indent 6 }}
      volumes:
      - name: shared
        emptyDir: {}
      initContainers:
        - name: wait-for-onezone
          image: {{ .Values.wait_for.image }}
          imagePullPolicy: {{ template "imagePullPolicy" dict "root" . "context" .Values.wait_for }}
          args:
            - "job"
            - "{{ template "onezone_name" . }}-ready-check"
        - name: wait-for-token-dispenser
          image: {{ .Values.wait_for.image }}
          imagePullPolicy: {{ template "imagePullPolicy" dict "root" . "context" .Values.wait_for }}
          args:
            - "pod"
            - >
              -lapp={{ template "token-dispenser_name" . }}
        - name: wait-for-oneprovider
          image: {{ .Values.wait_for.image }}
          imagePullPolicy: {{ template "imagePullPolicy" dict "root" . "context" .Values.wait_for }}
          args:
            - "job"
            - "{{ template "oneprovider_name" . }}-ready-check" 
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image }}
        imagePullPolicy: {{ template "imagePullPolicy" dict "root" . }}
        env:
          - name: ONECLIENT_INSECURE
            value: "true"
          - name: ONECLIENT_ACCESS_TOKEN
            value: "supplied_at_runtime"
          - name: ONECLIENT_PROVIDER_HOST
            value: "{{ template "oneprovider_name" . }}"
        command:
         - "sh"
         - "-c"
         - >
           echo "source /oneclient-mount.sh" >> ~/.bashrc ;
           {{- range $user := .Values.users }}{{ if hasKey . "oneclient"  }}{{ if has $.Values.suffix $user.oneclient }}{{ if .idps }}
           {{- if .idps.onepanel }}{{if .idps.onepanel.enabled }}
           idp=onepanel;
           {{- end }}{{ end }}
           {{- if .idps.keycloak }}{{if .idps.keycloak.enabled }}
           idp=keycloak-rhea;
           {{- end }}{{ end }}
           ONECLIENT_ACCESS_TOKEN=$(curl --silent -k -u {{ $user.name }}:{{ $user.password }} http://{{ template "token-dispenser_name" $ }}/api/v1.0/token/$idp);
           mount_dir="/mnt/oneclient/{{ $user.name }}";
           mkdir -p "$mount_dir";
           echo "Mounting oneclient in $mount_dir for user={{ $user.name }}, from idp=$idp, using TOKEN=$ONECLIENT_ACCESS_TOKEN.";
           oneclient -t $ONECLIENT_ACCESS_TOKEN "$mount_dir";
           while ! mount | grep -q "$mount_dir" ; do
           i=1;
           max_i=30;
           while ! mount| grep -q "$mount_dir" && [ $i -le $max_i ] ; do echo "Wainting ${i}/${max_i} time for mount $mount_dir. Sleeping for 2 seconds." ; i=$((i+1)) ; sleep 2 ; done ;
           if mount | grep -q /mnt/oneclient/meg ; then break ; else echo "Failed to mount $mount_dir retrying to run oneclient for dir=$mount_dir" ; fi  ;
           done ;
           echo "Success, mounted $mount_dir." ;
           {{- end }}{{ end }}{{ end }}{{ end }}
           echo "All clients have been mounted." ;
           touch /all_oneclients_mounted ;
           sleep infinity ;
        readinessProbe:
          exec:
            command:
             - cat 
             - /all_oneclients_mounted
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /shared
          name: shared
        volumeMounts:
          - mountPath: /oneclient-mount.sh
            subPath: oneclient-mount.sh
            name: oneclient-mount
            readOnly: true
      volumes:
      - name: oneclient-mount
        configMap:
          name: {{ template "fullname" . }}-config
          items:
          - key: oneclient-mount.sh
            path: oneclient-mount.sh