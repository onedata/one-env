---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "fullname" . }}-init
  labels:
    app: {{ template "fullname" . }}
    chart: {{ .Chart.Name }}
    release: {{ template "releaseName" . }}
    heritage: {{ .Release.Service }}
  annotations:
    version: "{{ .Chart.Version }}"
spec:
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: {{ .Chart.Name }}
        release: {{ template "releaseName" .  }}
        heritage: {{ .Release.Service }}
      annotations:
        version: "{{ .Chart.Version }}"
    spec:
      restartPolicy: Never
      hostNetwork: {{ template "hostNetwork" . }}
{{ include "imagePullSecrets" . | indent 6 }}
      initContainers:
      - name: wait-for-{{ .Chart.Name }}
        image: {{ .Values.wait_for.image }}
        imagePullPolicy: {{ template "imagePullPolicy" dict "root" . "context" .Values.wait_for }}
        command:
          - "/bin/sh"
          - "-c"
          - >
            while ! curl --output /dev/null --silent --connect-timeout 3 http://{{ template "keycloak_name" . }}; do echo "$(date) Trying keycloak http://{{ template "keycloak_name" . }} port 80...." ; done;
            echo "Keycloak http://{{ template "keycloak_name" . }} port 80 open!"
      containers:
      - name: onezone-ready-check
        image: {{ .Values.wait_for.image }}
        imagePullPolicy: {{ template "imagePullPolicy" dict "root" . }}
        command:
          - "/bin/sh"
          - "-c"
          - >
            adminUsername={{ .Values.init.adminUsername }};
            adminPassword={{ .Values.init.adminPassword }};
            keycloak_url=http://{{ template "keycloak_name" . }};
            realmId={{ .Values.init.realmId }};
            clientName={{ .Values.init.clientName }};
            onezone_url=https://{{ template "onezone_service_url" . }};
            
            export TOKEN=$(curl --silent --max-time 10 --retry 5 --retry-delay 2 --retry-max-time 32 -X POST "$keycloak_url/auth/realms/master/protocol/openid-connect/token" -H "Content-Type: application/x-www-form-urlencoded" -d "username=$adminUsername" -d "password=$adminPassword" -d 'grant_type=password' -d 'client_id=admin-cli' | jq -r '.access_token');
            echo "Created an short lived access token TOKEN=$TOKEN";
            
            keycloak_modify_master_realm=$(cat <<EEOF
            
            {
              "ssoSessionIdleTimeout": 31536000,
              "ssoSessionMaxLifespan": 31536000,
              "accessCodeLifespan": 31536000,
              "accessCodeLifespanLogin": 31536000,
              "accessCodeLifespanUserAction": 31536000,
              "accessTokenLifespan": 31536000,
              "accessTokenLifespanForImplicitFlow": 31536000,
              "actionTokenGeneratedByAdminLifespan": 31536000,
              "actionTokenGeneratedByUserLifespan": 31536000,
              "refreshTokenMaxReuse": 31536000,
              "actionTokenGeneratedByUserLifespan": 31536000
            }
            
            EEOF
            
            );
            
            echo "$keycloak_modify_master_realm" | curl --silent -X PUT "$keycloak_url/auth/admin/realms/master" -H 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" -d @- ;
            echo "Modified realm=master to make all tokens and codes long-lived";
            
            export TOKEN=$(curl --silent --max-time 10 --retry 5 --retry-delay 2 --retry-max-time 32 -X POST "$keycloak_url/auth/realms/master/protocol/openid-connect/token" -H "Content-Type: application/x-www-form-urlencoded" -d "username=$adminUsername" -d "password=$adminPassword" -d 'grant_type=password' -d 'client_id=admin-cli' | jq -r '.access_token');
            echo "Created a long-lived access token TOKEN=$TOKEN";
            
            keycloak_create_realm_json=$(cat <<EEOF
            
            {
              "realm": "$realmId",
              "enabled": true,
              "id": "$realmId",
              "ssoSessionIdleTimeout": 31536000,
              "ssoSessionMaxLifespan": 31536000,
              "accessCodeLifespan": 31536000,
              "accessCodeLifespanLogin": 31536000,
              "accessCodeLifespanUserAction": 31536000,
              "accessTokenLifespan": 31536000,
              "accessTokenLifespanForImplicitFlow": 31536000,
              "actionTokenGeneratedByAdminLifespan": 31536000,
              "actionTokenGeneratedByUserLifespan": 31536000,
              "refreshTokenMaxReuse": 31536000,
              "actionTokenGeneratedByUserLifespan": 31536000
            }
            
            EEOF
            
            );
            echo "$keycloak_create_realm_json" | curl --silent -X POST "$keycloak_url/auth/admin/realms" -H 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" -d @- ;
            echo "Created a realm realmId=$realmId";
            
            keycloak_create_client_json=$(cat <<EEOF
            
            {
              "clientId": "${clientName}",
              "enabled": true,
              "protocol": "openid-connect",
              "publicClient": false,
              "redirectUris": ["/validate_login"],
              "rootUrl": "$onezone_url",
              "baseUrl": "/auth/realms/${realmId}/account",
              "implicitFlowEnabled": true
            }
            
            EEOF
            
            );
            clientId=$(echo "$keycloak_create_client_json" | curl -v -X POST "$keycloak_url/auth/admin/realms/$realmId/clients" -H 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" -d @- 2>&1 | grep 'Location:' | sed -ne 's#^.*/\(.*\)$#\1#p' | tr -d $'\r');
            echo "Created a clinet clientId=$clientId";
            
            clientSecret=$(curl -v -X POST "$keycloak_url/auth/admin/realms/$realmId/clients/$clientId/client-secret" -H 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" 2>/dev/null | jq -r '.value');
            echo "Secret of clientId=$clientId is clientSecret=$clientSecret";
            
            keycloak_create_mapper_json=$(cat <<EEOF
            
            {
              "name": "groups",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-group-membership-mapper",
              "consentRequired": false,
              "consentText": "groups",
              "config": {
                "full.path": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "groups",
                "userinfo.token.claim": "true"
              }
            }
            
            EEOF
            
            );
            
            admin_cli_client_id=$(curl --silent -X GET "$keycloak_url/auth/admin/realms/$realmId/clients" -H 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" | jq -r '.[] | select(.clientId=="admin-cli").id' );
            echo -n "Creating a mapper for client=admin-cli admin_cli_client_id=$admin_cli_client_id [response: " ;
            echo "$keycloak_create_mapper_json" | curl --silent -w "'%{http_code}'" -X POST "$keycloak_url/auth/admin/realms/$realmId/clients/$admin_cli_client_id/protocol-mappers/models" -H 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" -d @-;
            echo "]. Success." ;
            
            echo -n "Creating a mapper for clientName=$clientName clientId=$clientId [response: " ;
            echo "$keycloak_create_mapper_json" | curl --silent -w "'%{http_code}'" -X POST "$keycloak_url/auth/admin/realms/$realmId/clients/$clientId/protocol-mappers/models" -H 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" -d @-;
            echo "]. Success." ;
            
            {{- if .Values.init.publishClientSecret }}
            echo "Setting a secret in a config map {{ template "fullname" . }}-config" ;
            kubectl get cm {{ template "fullname" . }}-config -o yaml | sed "s/KEYCLOAK_APP_CELINT_SECRET_SUPPLIED_AT_RUNTIME/$clientSecret/" | kubectl apply -f - ;
            {{- end }}
            
            {{- range .Values.users }}{{ if .idps }}{{- if (hasKey .idps "keycloak") }}{{ if .idps.keycloak.enabled }}
            keycloak_create_user=$(cat <<EEOF
            
            {
              "enabled": true,
              "firstName": "{{ .firstName }}",
              "lastName": "{{ .lastName }}",
              "email": "{{ .email }}",
              "username": "{{ .name }}"
            }
            
            EEOF
            
            );
            userId=$(echo "$keycloak_create_user" | curl -v -X POST "$keycloak_url/auth/admin/realms/$realmId/users" -H 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" -d @- 2>&1 | grep 'Location:' | sed -ne 's#^.*/\(.*\)$#\1#p' | tr -d $'\r');
            echo "Created a user=joe userId=$userId." ;
            
            keycloak_set_user_password=$(cat <<EEOF
            
            {
              "temporary": false,
              "type": "password",
              "value": "{{ .password }}"
            }
            
            EEOF
            
            );
            echo -n "Setting password={{ .password }} for a user=joe [response: " ;
            echo "$keycloak_set_user_password" | curl  --silent -w "'%{http_code}'" -X PUT "$keycloak_url/auth/admin/realms/$realmId/users/$userId/reset-password" -H 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" -d @- 2>&1;
            echo "]. Success." ;
            {{- end }}{{- end }}{{- end }}{{- end }}
            createGroup() {
              group=$1 ;
              parentId=$2 ;
              keycloak_create_group=$(cat <<EEOF
              {
                "name": "$group"
              }
            EEOF

              );
              if [ "$parentId" = "root" ]; then
                groupId=$(echo "$keycloak_create_group" | curl -v -X POST "$keycloak_url/auth/admin/realms/$realmId/groups" -H 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" -d @- 2>&1 | grep 'Location:' | sed -ne 's#^.*/\(.*\)$#\1#p' | tr -d $'\r');
              else
                groupId=$(echo "$keycloak_create_group" | curl -v -X POST "$keycloak_url/auth/admin/realms/$realmId/groups/$parentId/children" -H 'Content-Type: application/json' -H "Authorization: Bearer $TOKEN" -d @- 2>&1 | grep 'Location:' | sed -ne 's#^.*/\(.*\)$#\1#p' | tr -d $'\r')
              fi
              echo "$groupId" ;
            } ;
            {{- range .Values.groups }}{{ if .idps }}{{- if (hasKey .idps "keycloak")}}{{ if and (.idps.keycloak.enabled) (not .idps.keycloak.child) }}
            {{ template "keycloakGroup" dict "root" . "parentId" "root" }}
            {{- end }}{{- end }}{{- end }}{{- end }}
            exit 0 ;


