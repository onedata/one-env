{{- $keycloak_realmId := "UNINITIALIZED" }}
{{- if hasKey (index $.Values "keycloakInstance" ) "init" }}
{{- $keycloak_realmId := $.Values.keycloakInstance.init.realmId }}

{{- end }}
---

apiVersion: batch/v1
kind: Job
metadata:
  name: {{ template "fullname" . }}-users
  labels:
    app: {{ template "fullname" . }}
    chart: "{{ .Chart.Name }}"
    release: "{{ template "releaseName" . }}"
    heritage: "{{ .Release.Service }}"
    job: {{ template "fullname" . }}-users
  annotations:
    version: "{{ .Chart.Version }}"
spec:
  backoffLimit: 1
  template:
    metadata:
      name: "{{ template "releaseName" . }}"
      labels:
        app: {{ template "fullname" . }}
        chart: "{{ .Chart.Name }}"
        release: "{{ template "releaseName" . }}"
        heritage: "{{ .Release.Service }}"
        job: {{ template "fullname" . }}-users
      annotations:
        version: "{{ .Chart.Version }}"
    spec:
      hostNetwork: {{ template "hostNetwork" . }}
      {{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
      initContainers:
        - name: wait-for-release
          image: {{ .Values.wait_for.image }}
          imagePullPolicy: {{ template "imagePullPolicy" dict "root" . "context" .Values.wait_for }}
          args:
            - "pod"
            - >
              -l release in ({{ template "releaseName" . }}), chart notin ({{ .Chart.Name }})
{{ include "imagePullSecrets" . | indent 6 }}
      restartPolicy: Never
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image }}
        imagePullPolicy: {{ template "imagePullPolicy" dict "root" . }}
        env:
          - name: ONEZONE_HOST
            value: "https://{{ template "onezone_name" . }}"
          - name: ONEZONE_API_KEY
            value: "supplied_at_runtime"
          - name: ONEPANEL_BASIC_AUTH
            value: "{{ template "admin_username_template" . }}:{{ template "admin_password_template" . }}"
          - name: ONEPROVIDER_HOST
            value: "https://{{ template "oneprovider_name" . }}"
          - name: ONEPANEL_HOST
            value: "https://{{ template "onezone_name" . }}:9443"
          - name: KEYCLOAK_HOST
            value: "http://{{ template "keycloak_service_url" . }}"
          - name: TERM # otherwise zsh and bash autocompletion used in this container tends to go crazy
            value: "xterm-256color"
        command:
          - "bash"
          - "-c"
          - >
            set -e;
            echo "-k" > ~/.curlrc ; echo "-f" >> ~/.curlrc ;
          {{- range .Values.users }}{{ if (hasKey . "idps"  )}}{{ if (hasKey .idps "keycloak" )}}{{ if and .idps.keycloak.enabled .idps.keycloak.onezoneLogin }}
            idp=keycloak-{{ template "keycloak_idpName_template" $ }};
            echo "Loging keycloak user={{ .name }} with password={{ .password }} to Onezone. User info from Onezone is: " ;
            TOKEN="$(curl -k --silent -u {{ .name }}:{{ .password }} http://{{ template "token-dispenser_name" $ }}/api/v1.0/token/$idp)" ;
            echo "Onezone api access TOKEN=$TOKEN" ;
            curl -k --silent -H "X-Auth-Token: $TOKEN" $ONEZONE_HOST/api/v3/onezone/user ;
          {{- end }}{{ end }}{{ end }}{{ end }}
            exit 0;

