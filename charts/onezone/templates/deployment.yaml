{{- range $node := .Values.nodes }}
---
apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "fullname" $ }}-{{ $node.name }}
  labels:
    app: {{ template "fullname" $ }}
    chart: {{ $.Chart.Name }}
    release: {{ $.Release.Name }}
    heritage: {{ $.Release.Service }}
    onedata-service: "onezone"
  annotations:
    version: "{{ $.Chart.Version }}"
spec:
  serviceName: {{ template "fullname" $ }}
  replicas: {{ $.Values.onezone_nodes_count }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" $ }}
        chart: {{ $.Chart.Name }}
        release: {{ $.Release.Name }}
        heritage: {{ $.Release.Service }}
        onedata-service: "onezone"
      annotations:
        version: "{{ $.Chart.Version }}"
    spec:
      subdomain: {{ template "fullname" $ }}-{{ $node.name }}
      terminationGracePeriodSeconds: 0
      {{- if $.Values.onedata_anti_affinity_enabled }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: onedata-service
                operator: In
                values:
                - oneprovider
                - onezone
              - key: release
                operator: In
                values:
                - {{ $.Release.Name }}
            topologyKey: kubernetes.io/hostname
      {{- end }}
{{ include "imagePullSecrets" $ | indent 6 }}
      {{- if (index $.Values "generate-certificates" "enabled") }}
      initContainers:
        - name: certificate-init-container
          image: {{ index $.Values "generate-certificates" "image" }}
          imagePullPolicy: {{ default $.Values.imagePullPolicy $.Values.global.imagePullPolicy | default "IfNotPresent" }}
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CERT_DIR
              value: /etc/tls
          command:
            - "/bin/sh"
            - "-c"
            - >
              if [[ $POD_NAME != {{ template "fullname" $ }}-0 ]] ; then echo "Not generating certificates" ; exit 0 ; fi ;
              mkdir $(CERT_DIR) ;
              /certificate-init-container -secret-name={{ template "fullname" $ }}-secret-tls -labels=app={{ template "fullname" $ }},chart={{ $.Chart.Name }},release={{ $.Release.Name }},heritage={{ $.Release.Service }} -additional-dnsnames={{ template "fullname" $ }},{{ template "fullname" $ }}.$(NAMESPACE),{{ template "fullname" $ }}.$(NAMESPACE).svc -cert-dir=$(CERT_DIR) -namespace=$(NAMESPACE) -pod-ip=$(POD_IP) -pod-name=$(POD_NAME) -service-names={{ template "fullname" $ }} -cluster-domain={{ template "cluster_domain" $ }} ;
      {{- end }}
      containers:
      - name: {{ $.Chart.Name }}
        image: {{ default $.Values.image $.Values.onezoneImage }}
        imagePullPolicy: {{ default $.Values.imagePullPolicy $.Values.global.imagePullPolicy | default "IfNotPresent" }}
        {{- if or $.Values.cpu $.Values.memory }}
        resources:
          requests:
          {{- if $.Values.cpu }}
            cpu: {{ $.Values.cpu }}
          {{- end }}
          {{- if $.Values.memory }}
            memory: {{ $.Values.memory }}
          {{- end }}
        {{- end }}
        ports:
          - containerPort: 53
          - containerPort: 80
          - containerPort: 443
          - containerPort: 5555
          - containerPort: 5556
          - containerPort: 6665
          - containerPort: 6666
          - containerPort: 7443
          - containerPort: 8443
          - containerPort: 8876
          - containerPort: 8877
          - containerPort: 9443
        command:
          - "/bin/bash"
          - "-c"
          - >
            if [[ {{ quote $node.name }} != {{ quote $.Values.mainNode }} ]]; then export ONEPANEL_BATCH_MODE="false" ; fi ;
            env ;
            /root/onezone.sh ;
            cat /var/log/oz_panel/info.log ;
            exit 1 ;
        lifecycle:
          preStop:
            exec:
              command:
                - "sh"
                - "-c"
                - >
                  oz_panel stop ;
                  oz_worker stop ;
                  cluster_manager stop ;
                  /etc/init.d/couchbase-server stop ;
                  echo 1 > /monitor/onezone-exit ;
                  pkill -f onezone.py ;
        readinessProbe:
          initialDelaySeconds: 0
          periodSeconds: 1
          exec:
            # A hack, that makes sure that a pod reports ready when onezone has really started
            command:
              - "/bin/bash"
              - "-c"
              - >
                onepanel_ready() { sleep 5 ; exit 0 ; } ;
                if [[ {{ quote $node.name }} == {{ quote $.Values.mainNode }} ]]; then exit 0 ; else onepanel_ready ; fi ;
        envFrom:
        - configMapRef:
            name: {{ template "fullname" $ }}-onezone-config

        {{- if $node.binaries }}
        env:
          {{ range $node.binaries }}
            # assuming here that oz-panel will always have such name
            {{ if eq .name "oz-panel" }}
          - name: ONEPANEL_CONFIG_FILE
            value: {{ $.Values.hostPathPrefix }}/{{ $.Values.deploymentDir }}/onezone/{{ print "onezone_" $node.name "_env.config" }}
              {{ if .hostPath }}
          - name: ONEPANEL_PATH
            value: {{ $.Values.hostPathPrefix }}/{{ .hostPath }}
              {{ end }}
            {{ end }}
          {{ end }}
        {{- end }}

        {{- if or (index $.Values "generate-certificates" "enabled") (index $.Values "saml-idp" "enabled") ($node.binaries) }}
        volumeMounts:
        {{- end }}
        {{ if ($node.binaries) }}
              - mountPath: {{ $.Values.hostPathPrefix }}/{{ $.Values.deploymentDir }}/onezone/{{ print "onezone_" $node.name "_env.config" }}
                name: onepanel-config-file
        {{ end }}
        {{- range $node.binaries }}
          {{- if .hostPath }}
              # mountPath is path in the pod, we want that path to be exactly the same as the path on the host machine
              - mountPath: {{ $.Values.hostPathPrefix }}/{{ default .hostPath .mountPath }}
                name: {{ .name }}
              - mountPath: {{ $.Values.hostPathPrefix }}/{{ default .hostPath .mountPath }}/tmp/base-rel-{{ $node.name }}
                name: onezone-{{ .name }}-base-rel
              - mountPath: {{ $.Values.hostPathPrefix }}/{{ default .hostPath .mountPath }}/_build/default/rel/{{ .name | replace "-" "_"  }}
                name: onezone-{{ .name }}-rel
          {{- end }}
        {{- end }}
      {{- if (index $.Values "generate-certificates" "enabled") }}
          - mountPath: /etc/oz_panel/certs/key.pem
            subPath: tls.key
            name: tls
            readOnly: true
          - mountPath: /etc/oz_panel/certs/cert.pem
            subPath: tls.crt
            name: tls
            readOnly: true
          - mountPath: /etc/oz_panel/cacerts/cacert.pem
            subPath: k8s.crt
            name: tls
            readOnly: true
          - mountPath: /etc/oz_worker/cacerts/cacert.pem
            subPath: k8s.crt
            name: tls
            readOnly: true
          - mountPath: /etc/ssl/certs/kubernetes.crt
            subPath: k8s.crt
            name: tls
            readOnly: true
    {{- end }}
    {{- if (index $.Values "saml-idp" "enabled") }}
          - mountPath: /var/lib/oz_worker/saml.config
            subPath: saml.config
            name: saml-config
            readOnly: false
    {{- end }}
    {{- if or (index $.Values "generate-certificates" "enabled") (index $.Values "saml-idp" "enabled") ($node.binaries) }}
      volumes:
    {{- end }}
    {{ if ($node.binaries) }}
            - name: onepanel-config-file
              hostPath:
                path: {{ $.Values.vmPathPrefix }}/{{ $.Values.deploymentDir }}/onezone/{{ print "onezone_" $node.name "_env.config" }}
    {{ end }}
    {{- range $node.binaries }}
      {{- if .hostPath }}
            - name: {{ .name }}
              # hostPath is the path in minikube
              hostPath:
                path: {{ $.Values.vmPathPrefix }}/{{ .hostPath }}
            - name: onezone-{{ .name }}-base-rel
              hostPath:
                path: {{ $.Values.vmPathPrefix }}/{{ .hostPath }}/_build/default/rel/{{ .name | replace "-" "_"  }}
                type: DirectoryOrCreate
            - name: onezone-{{ .name }}-rel
              hostPath:
                path: {{ $.Values.vmPathPrefix }}/{{ $.Values.deploymentDir }}/onezone/onezone-{{ $node.name }}-{{ .name }}-rel
                type: DirectoryOrCreate
      {{- end }}
    {{- end }}
    {{- if (index $.Values "generate-certificates" "enabled") }}
      - name: tls
        secret:
          secretName: {{ template "fullname" $ }}-secret-tls
    {{- end }}
    {{- if (index $.Values "saml-idp" "enabled") }}
      - name: saml-config
        configMap:
          name: {{ template "fullname" $ }}-saml-config
    {{- end }}
{{- end }}