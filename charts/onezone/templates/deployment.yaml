apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: {{ template "fullname" . }}
  labels:
    app: {{ template "fullname" . }}
    chart: {{ .Chart.Name }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    onedata-service: "onezone"
  annotations:
    version: "{{ .Chart.Version }}"
spec:
  serviceName: {{ template "fullname" . }}
  replicas: {{ .Values.onezone_nodes_count }}
  template:
    metadata:
      labels:
        app: {{ template "fullname" . }}
        chart: {{ .Chart.Name }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        onedata-service: "onezone"
      annotations:
        version: "{{ .Chart.Version }}"
    spec:
      subdomain: {{ template "fullname" . }}
      terminationGracePeriodSeconds: 0
      {{- if or .Values.affinity .Values.onedata_anti_affinity_enabled }}
      affinity:
      {{- if .Values.onedata_anti_affinity_enabled }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: onedata-service
                operator: In
                values:
                - oneprovider
                - onezone
              - key: release
                operator: In
                values:
                - {{ .Release.Name }}
            topologyKey: kubernetes.io/hostname
      {{- end }}
      {{- if .Values.affinity }}
{{ toYaml .Values.affinity | indent 8 }}
      {{- end }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      {{- end }}
{{ include "imagePullSecrets" . | indent 6 }}
      {{- if (index .Values "generate-certificates" "enabled") }}
      initContainers:
        - name: certificate-init-container
          image: {{ index .Values "generate-certificates" "image" }}
          imagePullPolicy: {{ default .Values.imagePullPolicy .Values.global.imagePullPolicy | default "IfNotPresent" }}
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CERT_DIR
              value: /etc/tls
          command:
            - "/bin/sh"
            - "-c"
            - >
              if [[ $POD_NAME != {{ template "fullname" . }}-0 ]] ; then echo "Not generating certificates" ; exit 0 ; fi ;
              mkdir $(CERT_DIR) ;
              /certificate-init-container -secret-name={{ template "fullname" . }}-secret-tls -labels=app={{ template "fullname" . }},chart={{ .Chart.Name }},release={{ .Release.Name }},heritage={{ .Release.Service }} -additional-dnsnames={{ template "fullname" . }},{{ template "fullname" . }}.$(NAMESPACE),{{ template "fullname" . }}.$(NAMESPACE).svc -cert-dir=$(CERT_DIR) -namespace=$(NAMESPACE) -pod-ip=$(POD_IP) -pod-name=$(POD_NAME) -service-names={{ template "fullname" . }} -cluster-domain={{ template "cluster_domain" . }} ;
      {{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image }}
        imagePullPolicy: {{ default .Values.imagePullPolicy .Values.global.imagePullPolicy | default "IfNotPresent" }}
        {{- if or .Values.cpu .Values.memory }}
        resources:
          requests:
          {{- if .Values.cpu }}
            cpu: {{ .Values.cpu }}
          {{- end }}
          {{- if .Values.memory }}
            memory: {{ .Values.memory }}
          {{- end }}
        {{- end }}
        ports:
          - containerPort: 53
          - containerPort: 80
          - containerPort: 443
          - containerPort: 5555
          - containerPort: 5556
          - containerPort: 6665
          - containerPort: 6666
          - containerPort: 7443
          - containerPort: 8443
          - containerPort: 8876
          - containerPort: 8877
          - containerPort: 9443
        command:
          - "/bin/bash"
          - "-c"
          - >
            while [ ! -f /tmp/sources_mounted ] ; do sleep 2 ; done ;
            echo {{ template "fullname" . }}-{{ sub (.Values.onezone_nodes_count) 1 }} ;
            if [[ "$HOSTNAME" != {{ template "fullname" . }}-{{ sub (.Values.onezone_nodes_count) 1 }} ]]; then export ONEPANEL_BATCH_MODE="false" ; fi ;
            env ;
            {{- if .Values.sources }}
              python {{ $.Values.vmPathPrefix }}/{{ $.Values.deploymentDir }}/parse_sources.py  {{ $.Values.vmPathPrefix }}/{{ $.Values.deploymentDir }} ;
              if [[ -f onepanel_override ]]; then export ONEPANEL_OVERRIDE=$(cat onepanel_override) ; fi ;
            {{ end }}
            /root/onezone.sh ;
            cat /var/log/oz_panel/info.log ;
            exit 1 ;
        lifecycle:
          preStop:
            exec:
              command:
                - "sh"
                - "-c"
                - >
                  oz_panel stop ;
                  oz_worker stop ;
                  cluster_manager stop ;
                  /etc/init.d/couchbase-server stop ;
                  echo 1 > /monitor/onezone-exit ;
                  pkill -f onezone.py ;
        readinessProbe:
          initialDelaySeconds: 0
          periodSeconds: 1
          exec:
            # A hack, that makes sure that a pod reports ready when onezone has really started
            command:
              - "/bin/bash"
              - "-c"
              - >
                onepanel_ready() { sleep 5 ; exit 0 ; } ;
                if [[ "$HOSTNAME" == {{ template "fullname" . }}-{{ sub (.Values.onezone_nodes_count) 1 }} ]]; then exit 0 ; else onepanel_ready ; fi ;
        env:
          - name: SERVICE_NAME
            {{ if .Values.name }}
            value: {{ .Values.name }}
            {{- else -}}
            value: {{ template "fullname" $ }}
            {{- end }}
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: SERVICE_DOMAIN
            value: {{ template "service_url" $ }}
          - name: ONEPANEL_LOG_LEVEL
            value: {{ default "info" .Values.log_level | quote }}
          - name: ONEPANEL_GENERATE_TEST_WEB_CERT
            value: {{ default "false" .Values.onepanel_generate_test_web_cert | quote  }}
          {{ if .Values.generate_cert_domain }}
          - name: ONEPANEL_GENERATED_CERT_DOMAIN
            value: "{{ template "service_url" $ }}"
          {{ else }}
          - name: ONEPANEL_GENERATED_CERT_DOMAIN
            value: {{ default "" .Values.onepanel_generated_cert_domain | quote }}
          {{ end }}
          - name: ONEPANEL_TRUST_TEST_CA
            value: {{ default "false" .Values.onepanel_trust_test_ca | quote }}
          - name: ONEPANEL_BATCH_MODE
            value: {{ .Values.onepanel_batch_mode_enabled | quote }}
          - name: ONEZONE_CONFIG
            valueFrom:
              configMapKeyRef:
                name: {{ template "fullname" . }}-config
                key: ONEZONE_CONFIG
        volumeMounts:
#          {{- if .Values.sources }}
#          - mountPath: {{ $.Values.hostPathPrefix }}/{{ $.Values.deploymentDir }}
#            name: deployment-dir
#            {{- range $.Values.sources }}
#              {{- if .hostPath }}
#            # Mount sources. Again for all pods (nodes)all sources will be mounted.
#          - mountPath: {{ $.Values.hostPathPrefix }}/{{ .hostPath }}
#            name: {{ .name }}
#            # Mount data dir. It will be filled with data from scenario_runner
#          - mountPath: {{ $.Values.hostPathPrefix }}/{{ .hostPath }}/_build/default/rel
#            name: sources-{{ .name }}
#              {{ else }}
#          - mountPath: /tmp/{{ .name }}
#            name: sources-{{ .name }}
#              {{ end }}
#
#            {{ end }}
#          {{ end }}
          - name: config-map
            mountPath: /etc/oz_panel/overlay.config
            subPath: panel-overlay.config
          - name: config-map
            mountPath: /etc/oz_worker/overlay.config
            subPath:  worker-overlay.config
      {{- if (index .Values "generate-certificates" "enabled") }}
          - mountPath: /etc/oz_panel/certs/web_key.pem
            subPath: tls.key
            name: tls
            readOnly: true
          - mountPath: /etc/oz_panel/certs/web_cert.pem
            subPath: tls.crt
            name: tls
            readOnly: true
          - mountPath: /etc/oz_panel/certs/web_chain.pem
            subPath: k8s.crt
            name: tls
            readOnly: true
          # Make onepanel trust k8s cert
          - mountPath: /etc/oz_panel/cacerts/kubernetes.crt
            subPath: k8s.crt
            name: tls
            readOnly: true
          # Make system trust k8s cert
          - mountPath: /etc/ssl/certs/kubernetes.crt
            subPath: k8s.crt
            name: tls
            readOnly: true
    {{- end }}
    {{- if (index .Values "saml-idp" "enabled") }}
          - mountPath: /etc/oz_worker/saml.config
            subPath: saml.config
            name: saml-config
            readOnly: false
    {{- end }}
      volumes:
#      {{- if .Values.sources }}
#      - name: deployment-dir
#        hostPath:
#          path: {{ $.Values.vmPathPrefix }}/{{ $.Values.deploymentDir }}
#      # Sources. For each pod (node) all sources will be the mounted.
#        {{- range $.Values.sources }}
#        {{- if .hostPath }}
#      - name: {{ .name }}
#        hostPath:
#          path: {{ $.Values.vmPathPrefix }}/{{ .hostPath }}
#      # Random directory for each source. It is needed to store data. Each pod (node)
#      # will have different random directories.
#        {{- end }}
#      - name: sources-{{ .name }}
#        hostPath:
#          path: {{ $.Values.vmPathPrefix }}/{{ $.Values.deploymentDir }}/onezone/{{ .name }}
#        {{- end }}
#      {{ end }}
      - name: config-map
        configMap:
          name: {{ template "fullname" . }}-config
    {{- if (index .Values "generate-certificates" "enabled") }}
      - name: tls
        secret:
          secretName: {{ template "fullname" . }}-secret-tls
    {{- end }}
    {{- if (index .Values "saml-idp" "enabled") }}
      - name: saml-config
        configMap:
          name: {{ template "fullname" . }}-saml-config
    {{- end }}