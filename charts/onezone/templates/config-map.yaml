apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}-config
  labels:
    app: {{ template "fullname" . }}
    chart: {{ .Chart.Name }}
    release: {{ template "releaseName" .  }}
    heritage: {{ .Release.Service }}
    onedata-service: "onezone"
  annotations:
    version: "{{ .Chart.Version }}"
data:
  panel-overlay.config: {{ toYaml .Values.panelOverlayConfig }}
  worker-overlay.config: {{ toYaml .Values.panelOverlayConfig }}
  ONEZONE_CONFIG: |-
    cluster:
      domainName: "{{ template "service_url" . }}"
      nodes:
        {{- $r := . -}}
        {{- range $i := until (int (.Values.onezone_nodes_count)) }}
        n{{ $i }}: 
          hostname: {{ template "fullname" $r }}-{{ $i }}
        {{- end }}
      managers:
        mainNode: n{{ sub (.Values.onezone_nodes_count) 1 }} 
        nodes:
    {{- with .Values.cluster_config.managers }}
        {{- range $i := . }}
          - n{{ $i }}
        {{- end }}
    {{- else }}
        {{- range $i := until (int ($r.Values.onezone_nodes_count)) }}
          - n{{ $i }}
        {{- end }}
    {{- end }}
      workers:
        nodes:
    {{- with .Values.cluster_config.workers }}
        {{- range $i := . }}
          - n{{ $i }}
        {{- end }}
    {{- else }}
        {{- range $i := until (int ($r.Values.onezone_nodes_count)) }}
          - n{{ $i }}
        {{- end }}
    {{- end }}
      databases:
        nodes:
    {{- with .Values.cluster_config.databases }}
        {{- range $i := . }}
          - n{{ $i }}
        {{- end }}
    {{- else }}
        {{- range $i := until (int ($r.Values.onezone_nodes_count)) }}
          - n{{ $i }}
        {{- end }}
    {{- end }}
    onezone:
      {{ if .Values.name -}}
      name: {{ .Values.name }}
      {{- else -}}
      name: {{ template "fullname" . }}
      {{- end }}
      domainName: {{ template "service_url" . }}
    {{- if or .Values.onepanelAdminUsers .Values.onepanel_users }}
    onepanel:
      users:
        {{ .Values.onezone_main_admin.name }}:
          password: {{ .Values.onezone_main_admin.password }}
          userRole: admin
        {{- range .Values.onepanelAdminUsers }}
        {{ .name }}:
          password: {{ .password }}
          userRole: admin
        {{- end }}
        {{- range .Values.onepanel_users }}
        {{- if and (hasKey .idps "onepanel") }} {{- if .idps.onepanel.enabled }}
        {{ .name }}:
          password: {{ .password }}
          userRole: {{ if .idps.onepanel.type -}}{{- .idps.onepanel.type -}}{{- else -}}regular{{- end -}}
        {{- end }}{{- end }}
        {{- end }}
    {{- end }}

  auth.config: |-
    [
        % Currently Basic Auth (login/password) has no configuration options.
        % Just leave the tuple below to enable or remove it to disable Basic Auth.
        {basicAuth, []}
        
        % Currently other authentication options are disabled by default, because
        % they require cumbersome configuration per each OpenID provider.
        {{- if (index .Values "keycloak" "enabled") }}
        ,{ {{- .Values.keycloak.idpName }}, [
            % Standard config
            {auth_module, auth_keycloak},
            {app_id, <<"{{ .Values.keycloak.appId }}">>},
            {app_secret, <<"KEYCLOAK_APP_SECRET_SUPPLIED_AT_RUNTIME">>},
            % Provider specific config
            %{xrds_endpoint, <<"https://fed-id.nuv.la/auth/realms/SixSq/.well-known/openid-configuration">>},
            %{xrds_endpoint, <<"http://keycloak-keycloak-http.luma.svc.dev.onedata.uk.to/auth/realms/KEYCLOAK_APP_RELAMID_SUPPLIED_AT_RUNTIME/.well-known/openid-configuration">>},
            {xrds_endpoint, <<"http://{{ template "keycloak_service_url" . }}/auth/realms/{{ .Values.keycloak.init.realmId }}/.well-known/openid-configuration">>},
            % Authority delegation config
            {authority_delegation, [
                {enabled, true},
                {token_prefix, <<"{{ .Values.keycloak.tokenPrefix }}:">>}
            ]},
            {group_mapping, [
                {enabled, true},
                % All groups from this IdP will belong to the below VO group.
                {vo_group_id, <<"{{ .Values.keycloak.voGroupId }}">>},
                % attributes_to_map - which attributes sent by IdP should be mapped
                % to groups (each attribute value is expected to hold a list of strings).
                % Config format: list of tuples {A, B, C}:
                %   A -> attribute key
                %   B -> derived group type (role | team | unit | organization)
                %   C -> expected group structure, one of:
                %     * flat -> all groups will be a direct child of the VO group,
                %       names of groups will be the same as in the attribute.
                %     * {nested, SplitWith} -> each group membership will be split
                %       into a hierarchical structure using the specified split pattern.
                %       E.g. for string <<"a/b/c">> and SplitWith = <<"/">>, three
                %       nested groups will be created, with user belonging to the
                %       last one: VO <- a <- b <- c <- user.
                {attributes_to_map, [
                    {<<"groups">>, team, {nested, <<"/">>}},
                    {<<"roles">>, role, flat},
                    {<<"entitlement">>, role, flat}
                ]},
                % Optional field
                {super_group, <<"{{ .Values.keycloak.superGroup }}">>}
            ]}
        ]}
        {{- end }}
    ].
    
{{- if (index .Values "saml-idp" "enabled") }}
  saml.config: |-
    [].
{{- end }}